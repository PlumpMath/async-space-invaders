(doc concat)
(doc conj)
(doc flatten)
(flatten { :id "foo" }
)
(flatten { :id "foo" })
(flatten { :id "foo" :blah "lah" })
(array { :id "foo" :blah "lah" })
(seq { :id "foo" :blah "lah" })
(flatten (seq { :id "foo" :blah "lah" })
(flatten (seq { :id "foo" :blah "lah" }))
)
(flatten (seq { :id "foo" :blah "lah" }))
(doc put!)
(use 'clojure.core.async)
(doc put!)
(def entities { "e-1" { :id "1" } "e-2" { :id "2" }})
(map entities #(update-in %1 val tick))
(defn tick [e] 
(println e)
e)
(map entities #(update-in %1 val tick))
(map entities #(update-in %1 [val] tick))
(map entities tick))
(map entities tick)
(map tick entities)
(map #(update-in [val] tick) entities)
(map #(update-in %1 [val] tick) entities)
(map key entities)
(map val entities)
(map #(val %1) entities)
(map #(assoc %1 val (tick (val %1)) entities)
(map #(assoc %1 val (tick (val %1))) entities)
(map #(assoc %1 2 (tick (val %1))) entities)
(map #(assoc %1 1 (tick (val %1))) entities)
(map #(assoc %1 2 (tick (val %1))) entities)
(doseq [e (map val entities)] (draw-entity ctx e)))
(doseq [e (map val entittick e)))
(doseq [e (map val entittick e))
(doseq [e (map val entities) tick e))
(doseq [e (map val entities)] tick e))
(doseq [e (map val entities)] 
(doseq [e (map val entities)] (tick e)) 
